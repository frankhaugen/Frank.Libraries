using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Frank.Libraries.Fiken.Models
{
    /// <summary>
    ///
    /// </summary>
    public class InvoiceResult
    {
        /// <summary>
        /// Invoice Id
        /// </summary>
        /// <value>Invoice Id</value>
        [DataMember(Name = "invoiceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "invoiceId")]
        public long? InvoiceId { get; set; }

        /// <summary>
        /// Unique invoice number generated by us.
        /// </summary>
        /// <value>Unique invoice number generated by us.</value>
        [DataMember(Name = "invoiceNumber", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "invoiceNumber")]
        public long? InvoiceNumber { get; set; }

        /// <summary>
        /// Norwegian KID number. Number from 2 to 25 digits long.
        /// </summary>
        /// <value>Norwegian KID number. Number from 2 to 25 digits long.</value>
        [DataMember(Name = "kid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "kid")]
        public string Kid { get; set; }

        /// <summary>
        /// Issue date of the invoice, format yyyy-mm-dd
        /// </summary>
        /// <value>Issue date of the invoice, format yyyy-mm-dd</value>
        [DataMember(Name = "issueDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "issueDate")]
        public DateTime? IssueDate { get; set; }

        /// <summary>
        /// Due date of the invoice, format yyyy-mm-dd
        /// </summary>
        /// <value>Due date of the invoice, format yyyy-mm-dd</value>
        [DataMember(Name = "dueDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "dueDate")]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Original due date of the invoice if the due date has been changed, format yyyy-mm-dd
        /// </summary>
        /// <value>Original due date of the invoice if the due date has been changed, format yyyy-mm-dd</value>
        [DataMember(Name = "originalDueDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "originalDueDate")]
        public DateTime? OriginalDueDate { get; set; }

        /// <summary>
        /// Net amount (in invoice currency) in cents.
        /// </summary>
        /// <value>Net amount (in invoice currency) in cents.</value>
        [DataMember(Name = "net", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "net")]
        public long? Net { get; set; }

        /// <summary>
        /// VAT amount (in invoice currency) in cents.
        /// </summary>
        /// <value>VAT amount (in invoice currency) in cents.</value>
        [DataMember(Name = "vat", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "vat")]
        public long? Vat { get; set; }

        /// <summary>
        /// Gross amount (= net+VAT) (in invoice currency) in cents.
        /// </summary>
        /// <value>Gross amount (= net+VAT) (in invoice currency) in cents.</value>
        [DataMember(Name = "gross", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "gross")]
        public long? Gross { get; set; }

        /// <summary>
        /// Net amount in NOK (in cents)
        /// </summary>
        /// <value>Net amount in NOK (in cents)</value>
        [DataMember(Name = "netInNok", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "netInNok")]
        public long? NetInNok { get; set; }

        /// <summary>
        /// VAT amount in NOK (in cents)
        /// </summary>
        /// <value>VAT amount in NOK (in cents)</value>
        [DataMember(Name = "vatInNok", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "vatInNok")]
        public long? VatInNok { get; set; }

        /// <summary>
        /// Gross amount in NOK (in cents)
        /// </summary>
        /// <value>Gross amount in NOK (in cents)</value>
        [DataMember(Name = "grossInNok", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "grossInNok")]
        public long? GrossInNok { get; set; }

        /// <summary>
        /// Purchase associated with Invoice is a cash purchase.
        /// </summary>
        /// <value>Purchase associated with Invoice is a cash purchase.</value>
        [DataMember(Name = "cash", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cash")]
        public bool? Cash { get; set; }

        /// <summary>
        /// Comment/description printed above the invoice lines
        /// </summary>
        /// <value>Comment/description printed above the invoice lines</value>
        [DataMember(Name = "invoiceText", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "invoiceText")]
        public string InvoiceText { get; set; }

        /// <summary>
        /// Gets or Sets YourReference
        /// </summary>
        [DataMember(Name = "yourReference", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "yourReference")]
        public string YourReference { get; set; }

        /// <summary>
        /// Gets or Sets OurReference
        /// </summary>
        [DataMember(Name = "ourReference", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ourReference")]
        public string OurReference { get; set; }

        /// <summary>
        /// Gets or Sets OrderReference
        /// </summary>
        [DataMember(Name = "orderReference", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "orderReference")]
        public string OrderReference { get; set; }

        /// <summary>
        /// The UUID of invoice draft used to create the invoice.
        /// </summary>
        /// <value>The UUID of invoice draft used to create the invoice.</value>
        [DataMember(Name = "invoiceDraftUuid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "invoiceDraftUuid")]
        public string InvoiceDraftUuid { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "address")]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [DataMember(Name = "lines", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "lines")]
        public List<InvoiceLineResult> Lines { get; set; }

        /// <summary>
        /// ISO 4217 currency code, default value is NOK
        /// </summary>
        /// <value>ISO 4217 currency code, default value is NOK</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountNumber
        /// </summary>
        [DataMember(Name = "bankAccountNumber", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// If the invoice was not sent using Fiken this can be set to \"true\"
        /// </summary>
        /// <value>If the invoice was not sent using Fiken this can be set to \"true\"</value>
        [DataMember(Name = "sentManually", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sentManually")]
        public bool? SentManually { get; set; }

        /// <summary>
        /// Gets or Sets InvoicePdf
        /// </summary>
        [DataMember(Name = "invoicePdf", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "invoicePdf")]
        public Attachment InvoicePdf { get; set; }

        /// <summary>
        /// Associated credit note Id(s)
        /// </summary>
        /// <value>Associated credit note Id(s)</value>
        [DataMember(Name = "associatedCreditNotes", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "associatedCreditNotes")]
        public List<long?> AssociatedCreditNotes { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "attachments")]
        public List<Attachment> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "customer")]
        public Contact Customer { get; set; }

        /// <summary>
        /// Gets or Sets Sale
        /// </summary>
        [DataMember(Name = "sale", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sale")]
        public SaleResult Sale { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name = "project", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "project")]
        public ProjectResult Project { get; set; }


        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceResult {\n");
            sb.Append("  InvoiceId: ")
              .Append(InvoiceId)
              .Append("\n");
            sb.Append("  InvoiceNumber: ")
              .Append(InvoiceNumber)
              .Append("\n");
            sb.Append("  Kid: ")
              .Append(Kid)
              .Append("\n");
            sb.Append("  IssueDate: ")
              .Append(IssueDate)
              .Append("\n");
            sb.Append("  DueDate: ")
              .Append(DueDate)
              .Append("\n");
            sb.Append("  OriginalDueDate: ")
              .Append(OriginalDueDate)
              .Append("\n");
            sb.Append("  Net: ")
              .Append(Net)
              .Append("\n");
            sb.Append("  Vat: ")
              .Append(Vat)
              .Append("\n");
            sb.Append("  Gross: ")
              .Append(Gross)
              .Append("\n");
            sb.Append("  NetInNok: ")
              .Append(NetInNok)
              .Append("\n");
            sb.Append("  VatInNok: ")
              .Append(VatInNok)
              .Append("\n");
            sb.Append("  GrossInNok: ")
              .Append(GrossInNok)
              .Append("\n");
            sb.Append("  Cash: ")
              .Append(Cash)
              .Append("\n");
            sb.Append("  InvoiceText: ")
              .Append(InvoiceText)
              .Append("\n");
            sb.Append("  YourReference: ")
              .Append(YourReference)
              .Append("\n");
            sb.Append("  OurReference: ")
              .Append(OurReference)
              .Append("\n");
            sb.Append("  OrderReference: ")
              .Append(OrderReference)
              .Append("\n");
            sb.Append("  InvoiceDraftUuid: ")
              .Append(InvoiceDraftUuid)
              .Append("\n");
            sb.Append("  Address: ")
              .Append(Address)
              .Append("\n");
            sb.Append("  Lines: ")
              .Append(Lines)
              .Append("\n");
            sb.Append("  Currency: ")
              .Append(Currency)
              .Append("\n");
            sb.Append("  BankAccountNumber: ")
              .Append(BankAccountNumber)
              .Append("\n");
            sb.Append("  SentManually: ")
              .Append(SentManually)
              .Append("\n");
            sb.Append("  InvoicePdf: ")
              .Append(InvoicePdf)
              .Append("\n");
            sb.Append("  AssociatedCreditNotes: ")
              .Append(AssociatedCreditNotes)
              .Append("\n");
            sb.Append("  Attachments: ")
              .Append(Attachments)
              .Append("\n");
            sb.Append("  Customer: ")
              .Append(Customer)
              .Append("\n");
            sb.Append("  Sale: ")
              .Append(Sale)
              .Append("\n");
            sb.Append("  Project: ")
              .Append(Project)
              .Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }
}
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Frank.Libraries.Fiken.Models;

/// <summary>
/// </summary>
public class OrderConfirmation
{
    /// <summary>
    ///     offer ID
    /// </summary>
    /// <value>offer ID</value>
    [DataMember(Name = "confirmationId", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "confirmationId")]
    public long? ConfirmationId { get; set; }

    /// <summary>
    ///     UUID are represented as 32 hexadecimal (base-16) digits, displayed in 5 groups separated by hyphens, in the form
    ///     8-4-4-4-12 for a total of 36 characters.
    /// </summary>
    /// <value>
    ///     UUID are represented as 32 hexadecimal (base-16) digits, displayed in 5 groups separated by hyphens, in the form
    ///     8-4-4-4-12 for a total of 36 characters.
    /// </value>
    [DataMember(Name = "confirmationDraftUuid", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "confirmationDraftUuid")]
    public string ConfirmationDraftUuid { get; set; }

    /// <summary>
    ///     Date for offer
    /// </summary>
    /// <value>Date for offer</value>
    [DataMember(Name = "date", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "date")]
    public DateTime? Date { get; set; }

    /// <summary>
    ///     Unique offer number generated by us.
    /// </summary>
    /// <value>Unique offer number generated by us.</value>
    [DataMember(Name = "confirmationNumber", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "confirmationNumber")]
    public int? ConfirmationNumber { get; set; }

    /// <summary>
    ///     Net amount (in invoice currency) in cents.
    /// </summary>
    /// <value>Net amount (in invoice currency) in cents.</value>
    [DataMember(Name = "net", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "net")]
    public long? Net { get; set; }

    /// <summary>
    ///     VAT amount (in invoice currency) in cents.
    /// </summary>
    /// <value>VAT amount (in invoice currency) in cents.</value>
    [DataMember(Name = "vat", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "vat")]
    public long? Vat { get; set; }

    /// <summary>
    ///     Gross amount (= net+VAT) (in invoice currency) in cents.
    /// </summary>
    /// <value>Gross amount (= net+VAT) (in invoice currency) in cents.</value>
    [DataMember(Name = "gross", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "gross")]
    public long? Gross { get; set; }

    /// <summary>
    ///     Comment/description
    /// </summary>
    /// <value>Comment/description</value>
    [DataMember(Name = "comment", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "comment")]
    public string Comment { get; set; }

    /// <summary>
    ///     Gets or Sets YourReference
    /// </summary>
    [DataMember(Name = "yourReference", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "yourReference")]
    public string YourReference { get; set; }

    /// <summary>
    ///     Gets or Sets OurReference
    /// </summary>
    [DataMember(Name = "ourReference", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "ourReference")]
    public string OurReference { get; set; }

    /// <summary>
    ///     Reference if sending invoice via EHF.
    /// </summary>
    /// <value>Reference if sending invoice via EHF.</value>
    [DataMember(Name = "orderReference", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "orderReference")]
    public string OrderReference { get; set; }

    /// <summary>
    ///     The discount amount in the specified currency.
    /// </summary>
    /// <value>The discount amount in the specified currency.</value>
    [DataMember(Name = "discount", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "discount")]
    public decimal? Discount { get; set; }

    /// <summary>
    ///     Gets or Sets Address
    /// </summary>
    [DataMember(Name = "address", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "address")]
    public Address Address { get; set; }

    /// <summary>
    ///     Gets or Sets Lines
    /// </summary>
    [DataMember(Name = "lines", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "lines")]
    public List<InvoiceLineResult> Lines { get; set; }

    /// <summary>
    ///     ISO 4217 currency code, default value is NOK
    /// </summary>
    /// <value>ISO 4217 currency code, default value is NOK</value>
    [DataMember(Name = "currency", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "currency")]
    public string Currency { get; set; }

    /// <summary>
    ///     Contact associated with offer.
    /// </summary>
    /// <value>Contact associated with offer.</value>
    [DataMember(Name = "contactId", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "contactId")]
    public long ContactId { get; set; }

    /// <summary>
    ///     Contact person associated with the order confirmation. Must belong to given contact.
    /// </summary>
    /// <value>Contact person associated with the order confirmation. Must belong to given contact.</value>
    [DataMember(Name = "contactPersonId", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "contactPersonId")]
    public long ContactPersonId { get; set; }

    /// <summary>
    ///     Gets or Sets ProjectId
    /// </summary>
    [DataMember(Name = "projectId", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "projectId")]
    public long ProjectId { get; set; }

    /// <summary>
    ///     If the order confirmation was used to create an invoice, the id of the associated invoice. Otherwise null is
    ///     returned.
    /// </summary>
    /// <value>
    ///     If the order confirmation was used to create an invoice, the id of the associated invoice. Otherwise null is
    ///     returned.
    /// </value>
    [DataMember(Name = "createdInvoice", EmitDefaultValue = false)]
    [JsonProperty(PropertyName = "createdInvoice")]
    public long CreatedInvoice { get; set; }


    /// <summary>
    ///     Get the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class OrderConfirmation {\n");
        sb.Append("  ConfirmationId: ")
          .Append(ConfirmationId)
          .Append("\n");
        sb.Append("  ConfirmationDraftUuid: ")
          .Append(ConfirmationDraftUuid)
          .Append("\n");
        sb.Append("  Date: ")
          .Append(Date)
          .Append("\n");
        sb.Append("  ConfirmationNumber: ")
          .Append(ConfirmationNumber)
          .Append("\n");
        sb.Append("  Net: ")
          .Append(Net)
          .Append("\n");
        sb.Append("  Vat: ")
          .Append(Vat)
          .Append("\n");
        sb.Append("  Gross: ")
          .Append(Gross)
          .Append("\n");
        sb.Append("  Comment: ")
          .Append(Comment)
          .Append("\n");
        sb.Append("  YourReference: ")
          .Append(YourReference)
          .Append("\n");
        sb.Append("  OurReference: ")
          .Append(OurReference)
          .Append("\n");
        sb.Append("  OrderReference: ")
          .Append(OrderReference)
          .Append("\n");
        sb.Append("  Discount: ")
          .Append(Discount)
          .Append("\n");
        sb.Append("  Address: ")
          .Append(Address)
          .Append("\n");
        sb.Append("  Lines: ")
          .Append(Lines)
          .Append("\n");
        sb.Append("  Currency: ")
          .Append(Currency)
          .Append("\n");
        sb.Append("  ContactId: ")
          .Append(ContactId)
          .Append("\n");
        sb.Append("  ContactPersonId: ")
          .Append(ContactPersonId)
          .Append("\n");
        sb.Append("  ProjectId: ")
          .Append(ProjectId)
          .Append("\n");
        sb.Append("  CreatedInvoice: ")
          .Append(CreatedInvoice)
          .Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }
}